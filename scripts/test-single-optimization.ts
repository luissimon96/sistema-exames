#!/usr/bin/env npx tsx
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testSingleOptimization() {
  try {
    console.log('üß™ Testando Uma √önica Otimiza√ß√£o\n');

    // Testar na tabela Account
    console.log('üìã Pol√≠tica ANTES:');
    const beforePolicy = await prisma.$queryRaw`
      SELECT qual FROM pg_policies 
      WHERE tablename = 'Account' AND policyname = 'accounts_own_record'
    ` as Array<{qual: string}>;
    
    console.log(`   ${beforePolicy[0]?.qual || 'N√£o encontrada'}\n`);

    // Aplicar otimiza√ß√£o com subquery correta
    console.log('üîß Aplicando otimiza√ß√£o...');
    
    await prisma.$executeRawUnsafe(`DROP POLICY IF EXISTS "accounts_own_record" ON "Account"`);
    
    // Usar uma subquery real otimizada
    await prisma.$executeRawUnsafe(`
      CREATE POLICY "accounts_own_record" ON "Account" FOR ALL 
      USING ((SELECT auth.uid())::text = "userId")
    `);

    console.log('‚úÖ Otimiza√ß√£o aplicada!\n');

    // Verificar pol√≠tica DEPOIS
    console.log('üìã Pol√≠tica DEPOIS:');
    const afterPolicy = await prisma.$queryRaw`
      SELECT qual FROM pg_policies 
      WHERE tablename = 'Account' AND policyname = 'accounts_own_record'
    ` as Array<{qual: string}>;
    
    console.log(`   ${afterPolicy[0]?.qual || 'N√£o encontrada'}\n`);

    // Testar se ainda cont√©m auth.uid()
    const containsAuthUid = afterPolicy[0]?.qual?.includes('auth.uid()');
    const containsSelectAuthUid = afterPolicy[0]?.qual?.includes('SELECT auth.uid()');
    
    console.log('üîç An√°lise:');
    console.log(`   Cont√©m auth.uid(): ${containsAuthUid ? '‚ö†Ô∏è SIM' : '‚úÖ N√ÉO'}`);
    console.log(`   Cont√©m SELECT auth.uid(): ${containsSelectAuthUid ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (containsSelectAuthUid && !containsAuthUid) {
      console.log('\nüéâ SUCESSO! Pol√≠tica otimizada corretamente');
    } else if (containsAuthUid) {
      console.log('\n‚ö†Ô∏è Ainda cont√©m auth.uid() direto - precisa de abordagem diferente');
    }

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSingleOptimization();